Exercise1:(Level-2)
Create a class containing an int and a char that are not initialized and print their values to verify that Java performs default initialization.



Exercise2:(Level-1)
Following the HelloDate.java example in this chapter, create a "hello,world" program that simply displays that statement. 
You need only a single method in your class (the "main" one that gets executed when the program starts). 
Remember to make it static and to include the argument list, even though you don't use the argument list.
Compile the program with javac and run it using java. 
If you are using a different development environment than the JDK, learn how to compile and run programs in that environment.



Exercise3:(Level-1)
Find the code fragments involving ATypeNameand turn them into a program that compiles and runs.



Exercise4:(Level-1)
Turn the DataOnly code fragment into a program that compiles and runs.



Exercise5:(Level-1)
Modify the previous exercise so that the values of the data in DataOnly are assigned to and printed in main().



Exercise6:(Level-2)
Write a program that includes and calls the storage() method defined as a code fragment in this chapter.



Exercise7:(Level-1)
Turn the Incrementable code fragment into a working program.



Exercise8:(Level-3)
Write a program that demonstrates that, no matter how many objects you create of a particular class, 
there is only one instance of a particular static field in that class.



Exercise9:(Level-2)
Write a program that demonstrate that autoboxing works for all the primitive types and their wrappers.



Exercise10:(Level-2)
Write a program that prints three arguments taken from the command line. 
To do this, you'll need to index into the command-line array of Strings.



Exercise11:(Level-1)
Turn the AllTheColorsOfTheRainbow example into a program that compiles and runs.



Exercise12:(Level-2)
Find the code for the second version of HelloDate.java, which is the simple comment documentation example. 
Execute Javadoc on the file and view the results with your Web browser.



Exercise13:(Level-1)
Run Documentation.java, Documentation2.java, and Documnetation3.java through Javadoc. 
Verify the resulting documentation with your Web browser.



Exercise14:(Level-1)
Add an HTML list of items to the documentation in the previous exercise.



Exercise15:(Level-1)
Take the program in Exercise2 and add comment documnetation to it. 
Extract this comment documentation into an HTML file using Javadoc and view it with your Web browser.



Exercise16:(Level-1)
In the Initialization & Cleanup chapter, locate the Overloading.java example and add Javadoc documentation.
Extract this comment documentation into an HTML file using Javadoc and view it with your Web browser.


